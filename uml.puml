@startuml
title Monster Trading Cards Game (MCTG) - UML Diagram

package "httpserver" {
    package "http" {
        enum ContentType {
            PLAIN_TEXT
            HTML
            JSON
        }
        enum HttpStatus {
            OK
            CREATED
            ACCEPTED
            NO_CONTENT
            BAD_REQUEST
            UNAUTHORIZED
            FORBIDDEN
            NOT_FOUND
            CONFLICT
            INTERNAL_SERVER_ERROR
            NOT_IMPLEMENTED
        }
        enum Method {
            GET
            POST
            PUT
            PATCH
            DELETE
        }
    }

    package "server" {
        class HeaderMap {
            +ingest(headerLine: String)
            +getHeader(headerName: String): String
            +getContentLength(): int
            +print()
        }

        class Request {
            +getServiceRoute(): String
            +getUrlContent(): String
            +setUrlContent(urlContent: String)
            +getMethod(): Method
            +setMethod(method: Method)
            +getPathname(): String
            +setPathname(pathname: String)
            +getParams(): String
            +setParams(params: String)
            +getHeaderMap(): HeaderMap
            +setHeaderMap(headerMap: HeaderMap)
            +getBody(): String
            +setBody(body: String)
            +getPathParts(): List<String>
            +setPathParts(pathParts: List<String>)
        }

        class Response {
            +Response(httpStatus: HttpStatus, contentType: ContentType, content: String)
            +get(): String
        }

        class Server {
            +Server(port: int, router: Router)
            +start()
        }

        interface RestController {
            +handleRequest(request: Request): Response
        }
    }

    package "utils" {
        class RequestBuilder {
            +buildRequest(bufferedReader: BufferedReader): Request
        }

        class RequestHandler {
            +RequestHandler(clientSocket: Socket, router: Router)
            +run()
        }

        class Router {
            +addService(route: String, service: RestController)
            +removeService(route: String)
            +resolve(route: String): RestController
        }
    }
}

package "application" {
    package "model" {
        class User {
            - username: String
            - password: String
            - token: String
        }

        abstract class Card {
        }

        class MonsterCard extends Card {
        }

        class SpellCard extends Card {
        }

        class Deck {
        }

        class GameStats {
        }

        class Package {
        }

        class TradeDeal {
        }
    }

    package "controller" {
        class UserController {
            +handleRequest(request: Request): Response
        }
    }

    package "service" {
        abstract class AbstractService {
            +getObjectMapper(): ObjectMapper
        }
        class UserService {
            +register(request: Request): Response
            +login(request: Request): Response
        }
    }

    package "persistence" {
        package "repository" {
            interface UserRepository {
                +registerUser(username: String, password: String): String
                +loginUser(username: String, password: String): String
            }

            class UserRepositoryImpl {
                +registerUser(username: String, password: String): String
                +loginUser(username: String, password: String): String
            }
        }

        class DataAccessException {
        }

        class UnitOfWork {
            +commitTransaction()
            +rollbackTransaction()
            +prepareStatement(sql: String): PreparedStatement
        }

        enum DatabaseManager {
            +getConnection(): Connection
        }
    }
}

' Relationships
Router -> RestController
RestController <|.. UserController
Server --> Router
RequestHandler --> RequestBuilder
RequestHandler --> Router
RequestBuilder --> Request
Request --> HeaderMap
Response --> HttpStatus
Response --> ContentType
UserController --> UserService
UserService --> AbstractService
UserService --> UserRepository
UserRepository <|.. UserRepositoryImpl
UserRepositoryImpl --> UnitOfWork
UnitOfWork --> DatabaseManager
DatabaseManager --> DataAccessException

@enduml
